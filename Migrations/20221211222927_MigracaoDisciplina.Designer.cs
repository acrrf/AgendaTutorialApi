// <auto-generated />
using System;
using AgendaTutorialApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgendaTutorialApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221211222927_MigracaoDisciplina")]
    partial class MigracaoDisciplina
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AgendaTutorialApi.Models.Agendamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAgendamento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraAgendamento")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Agendamentos");
                });

            modelBuilder.Entity("AgendaTutorialApi.Models.Disciplina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Disciplinas");
                });

            modelBuilder.Entity("AgendaTutorialApi.Models.Disponibilidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataDisponibilidade")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraDisponibilidade")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Disponibilidades");
                });

            modelBuilder.Entity("AgendaTutorialApi.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Senha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "ana.felippe3@etec.sp.gov.br",
                            Login = "AnaClaudia",
                            Nome = "Ana Claudia",
                            TipoUsuario = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "maroyofelippe@gmail.com",
                            Login = "mrroyo",
                            Nome = "Marco Royo",
                            TipoUsuario = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "rafaelTutor@gmail.com",
                            Login = "rafaroyo",
                            Nome = "Rafael Royo",
                            TipoUsuario = 3
                        },
                        new
                        {
                            Id = 1,
                            Nome = "Admin",
                            PasswordHash = new byte[] { 244, 153, 48, 53, 192, 225, 244, 167, 246, 129, 96, 110, 232, 9, 27, 252, 52, 167, 162, 126, 181, 221, 108, 51, 215, 62, 56, 157, 69, 78, 20, 114, 195, 100, 228, 133, 47, 103, 219, 212, 231, 245, 185, 213, 160, 215, 214, 188, 220, 242, 204, 114, 74, 100, 28, 183, 31, 8, 2, 12, 89, 215, 12, 187 },
                            PasswordSalt = new byte[] { 142, 103, 103, 102, 100, 121, 205, 43, 139, 69, 188, 31, 183, 27, 240, 181, 35, 168, 106, 188, 12, 58, 185, 246, 226, 61, 134, 150, 113, 68, 169, 143, 114, 111, 109, 77, 56, 90, 34, 0, 55, 122, 155, 73, 214, 142, 80, 224, 60, 101, 223, 228, 35, 160, 229, 125, 141, 165, 235, 218, 153, 178, 139, 122, 158, 105, 184, 19, 76, 17, 113, 179, 47, 213, 203, 11, 57, 236, 222, 245, 181, 200, 227, 48, 225, 168, 176, 171, 106, 234, 24, 72, 13, 176, 63, 252, 190, 16, 148, 207, 84, 41, 183, 21, 75, 64, 149, 162, 98, 228, 200, 35, 101, 6, 60, 79, 105, 83, 57, 230, 230, 239, 27, 133, 20, 23, 47, 204 },
                            Senha = "",
                            TipoUsuario = 4
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
